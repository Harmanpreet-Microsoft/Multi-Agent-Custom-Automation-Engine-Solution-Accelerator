name: Validate Deployment

on:
  push:
  workflow_run:
    workflows: ["Build Docker and Optional Push"]
    types:
      - completed
    branches:
      - main
      - hotfix
  schedule:
    - cron: "0 11,23 * * *"
  workflow_dispatch:

env:
  GPT_MIN_CAPACITY: 140
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    outputs:
      RESOURCE_GROUP_NAME: ${{ steps.check_create_rg.outputs.RESOURCE_GROUP_NAME }}
      WEBAPP_URL: ${{ steps.get_output.outputs.WEBAPP_URL }}
      DEPLOYMENT_SUCCESS: ${{ steps.deployment_status.outputs.SUCCESS }}
      API_APP_URL: ${{ steps.get_backend_url.outputs.CONTAINER_APP_URL }}
      CONTAINER_APP: ${{ steps.get_backend_url.outputs.CONTAINER_APP }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Run Quota Check
        id: quota-check
        run: |
          export AZURE_CLIENT_ID="${{ secrets.AZURE_CLIENT_ID }}"
          export AZURE_TENANT_ID="${{ secrets.AZURE_TENANT_ID }}"
          export AZURE_CLIENT_SECRET="${{ secrets.AZURE_CLIENT_SECRET }}"
          export AZURE_SUBSCRIPTION_ID="${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          export GPT_MIN_CAPACITY="140"
          export AZURE_REGIONS="${{ vars.AZURE_REGIONS }}"

          chmod +x infra/scripts/checkquota.sh
          if ! infra/scripts/checkquota.sh; then
            if grep -q "No region with sufficient quota found" infra/scripts/checkquota.sh; then
              echo "QUOTA_FAILED=true" >> $GITHUB_ENV
            fi
            exit 1
          fi

      - name: Send Notification on Quota Failure
        if: env.QUOTA_FAILED == 'true'
        run: |
          RUN_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          EMAIL_BODY=$(cat <<EOF
          {
            "body": "<p>Dear Team,</p><p>The quota check has failed, and the pipeline cannot proceed.</p><p><strong>Build URL:</strong> ${RUN_URL}</p><p>Please take necessary action.</p><p>Best regards,<br>Your Automation Team</p>"
          }
          EOF
          )
          curl -X POST "${{ secrets.AUTO_LOGIC_APP_URL }}" \
            -H "Content-Type: application/json" \
            -d "$EMAIL_BODY" || echo "Failed to send notification"

      - name: Fail Pipeline if Quota Check Fails
        if: env.QUOTA_FAILED == 'true'
        run: exit 1

      - name: Set Deployment Region
        run: |
          VALID_REGION=$(jq -r '.region' infra/scripts/quota_result.json)
          echo "AZURE_LOCATION=$VALID_REGION" >> $GITHUB_ENV

      - name: Setup Azure CLI
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          az --version

      - name: Login to Azure
        run: |
          az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}
          az account set --subscription "${{ secrets.AZURE_SUBSCRIPTION_ID }}"

      - name: Install Bicep CLI
        run: az bicep install

      - name: Generate Resource Group Name
        id: generate_rg_name
        run: |
          ACCL_NAME="macae"
          SHORT_UUID=$(uuidgen | cut -d'-' -f1)
          echo "RESOURCE_GROUP_NAME=arg-${ACCL_NAME}-${SHORT_UUID}" >> $GITHUB_ENV

      - name: Check and Create Resource Group
        id: check_create_rg
        run: |
          if [ "$(az group exists --name ${{ env.RESOURCE_GROUP_NAME }})" = "false" ]; then
            az group create --name ${{ env.RESOURCE_GROUP_NAME }} --location ${{ env.AZURE_LOCATION }}
          fi
          echo "RESOURCE_GROUP_NAME=${{ env.RESOURCE_GROUP_NAME }}" >> $GITHUB_OUTPUT

      - name: Generate Unique Solution Prefix
        id: generate_solution_prefix
        run: |
          echo "SOLUTION_PREFIX=macae$(date +%s | tail -c 6)" >> $GITHUB_ENV

      - name: Deploy Bicep Template
        id: deploy
        run: |
          IMAGE_TAG="latest"
          if [[ "${{ env.BRANCH_NAME }}" == "hotfix" ]]; then IMAGE_TAG="hotfix"; fi

          az deployment group create \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --template-file infra/main.bicep \
            --parameters \
              solutionPrefix=${{ env.SOLUTION_PREFIX }} \
              solutionLocation=${{ env.AZURE_LOCATION }} \
              azureOpenAILocation=${{ env.AZURE_LOCATION }} \
              modelDeploymentType="GlobalStandard" \
              gptModelName="gpt-4o" \
              gptModelVersion="2024-08-06" \
              imageTag="${IMAGE_TAG}" \
            --output json

      - name: Extract Web App and API App URLs
        id: get_output
        run: |
          for NAME in $(az webapp list --resource-group ${{ env.RESOURCE_GROUP_NAME }} --query "[].name" -o tsv); do
            if [[ $NAME == app-* ]]; then
              echo "WEBAPP_URL=https://${NAME}.azurewebsites.net" >> $GITHUB_OUTPUT
            fi
          done

      - name: Get Container App Backend URL
        id: get_backend_url
        run: |
          CONTAINER_APP_NAME=$(az containerapp list --resource-group ${{ env.RESOURCE_GROUP_NAME }} --query "[0].name" -o tsv)
          CONTAINER_APP_URL=$(az containerapp show --name "$CONTAINER_APP_NAME" --resource-group ${{ env.RESOURCE_GROUP_NAME }} --query "properties.configuration.ingress.fqdn" -o tsv)
          echo "CONTAINER_APP_URL=https://${CONTAINER_APP_URL}" >> $GITHUB_OUTPUT
          echo "CONTAINER_APP=${CONTAINER_APP_NAME}" >> $GITHUB_OUTPUT

      - name: Set Deployment Status
        id: deployment_status
        if: always()
        run: |
          [[ "${{ job.status }}" == "success" ]] && echo "SUCCESS=true" || echo "SUCCESS=false" >> $GITHUB_OUTPUT

  e2e-test:
    needs: deploy
    if: needs.deploy.outputs.DEPLOYMENT_SUCCESS == 'true'
    uses: ./.github/workflows/test-automation.yml
    with:
      MACAE_WEB_URL: ${{ needs.deploy.outputs.WEBAPP_URL }}
      MACAE_URL_API: ${{ needs.deploy.outputs.API_APP_URL }}
      MACAE_RG: ${{ needs.deploy.outputs.RESOURCE_GROUP_NAME }}
      MACAE_CONTAINER_APP: ${{ needs.deploy.outputs.CONTAINER_APP }}
    secrets: inherit

  cleanup-deployment:
    if: always() && needs.deploy.outputs.RESOURCE_GROUP_NAME != ''
    needs: [deploy, e2e-test]
    runs-on: ubuntu-latest
    env:
      RESOURCE_GROUP_NAME: ${{ needs.deploy.outputs.RESOURCE_GROUP_NAME }}
    steps:
      - name: Setup Azure CLI
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          az --version

      - name: Login to Azure
        run: |
          az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}
          az account set --subscription "${{ secrets.AZURE_SUBSCRIPTION_ID }}"

      - name: Get OpenAI Resource
        id: get_openai_resource
        run: |
          openai_resource_name=$(az resource list --resource-group ${{ env.RESOURCE_GROUP_NAME }} --resource-type "Microsoft.CognitiveServices/accounts" --query "[0].name" -o tsv)
          echo "OPENAI_RESOURCE_NAME=$openai_resource_name" >> $GITHUB_ENV

      - name: Delete Resource Group
        if: always()
        run: |
          if [ "$(az group exists --name ${{ env.RESOURCE_GROUP_NAME }})" = "true" ]; then
            az group delete --name ${{ env.RESOURCE_GROUP_NAME }} --yes --no-wait
          fi

      - name: Retry Check for Deleted Resources
        run: |
          for i in 30 60 120; do
            if az resource list --resource-group ${{ env.RESOURCE_GROUP_NAME }} --output yaml | grep -q "${{ env.OPENAI_RESOURCE_NAME }}"; then
              echo "Resource still exists. Retrying in $i seconds..."
              sleep $i
            else
              echo "Resource no longer exists."
              break
            fi
          done

      - name: Purge Resources
        if: env.OPENAI_RESOURCE_NAME != ''
        run: |
          az resource delete --ids "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/providers/Microsoft.CognitiveServices/locations/eastus/resourceGroups/${{ env.RESOURCE_GROUP_NAME }}/deletedAccounts/${{ env.OPENAI_RESOURCE_NAME }}" || echo "Purge failed"

      - name: Send Notification on Failure
        if: failure()
        run: |
          RUN_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          EMAIL_BODY=$(cat <<EOF
          {
            "body": "<p>Dear Team,</p><p>The deployment has failed.</p><p><strong>Build URL:</strong> ${RUN_URL}</p><p>Please investigate.</p><p>Regards,<br>Automation Team</p>"
          }
          EOF
          )
          curl -X POST "${{ secrets.LOGIC_APP_URL }}" -H "Content-Type: application/json" -d "$EMAIL_BODY"

      - name: Logout from Azure
        run: |
          az logout
