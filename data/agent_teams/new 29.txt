Tasks:

Done: Make 3 teams upload work to cosmos (HR, Marketing, Retail).  We will load this Cosmos data on deploy as default teams.
Done: - call "/socket/{process_id}" (start_comms) to setup websocket
Done: Make sure that a team is always selected - start with the hr.json team

call init_team API for the currently loaded team on App start - 
Spinner / team-loading should display until this call returns (user should not be able to input tasks)
<takes about 20 seconds> - say something like "team loading" with spinner
FE: send unload current team API and call init team for team switch - sending select_team(new team id)
	spin while waiting for return of API
BE: unload old team - load new team - return status

BE: For Francia - implement get_plans to fill in history from cosmos

BE: Create a teams container in Cosmos and move all loaded team definitions there

Implement saving of plan to cosmos -> history in...

================ Request submit flow ======================
on request submission call "/process_request" (process_request)
This will return immediately - move to other page and display spinner -> "creating plan"
Socket will start receiving messages ->
Stream plan output into main window

Will receive the PlanApprovalRequest message
	Enable accept / reject UI
Send PlanApprovalResponse message when user answers

If not approved 
	BE: plan will cancel on backend 
	FE: - enable input again for fresh request
	Call input_request API on backend again (just like inputting any request)

If approved:
	Display plan steps in right pane if approved
=============================================================

================== Message Streaming ========================	
Process socket message routing to display agent output
	See message types in src\backend\v3\models\messages.py
	for each message from agent - process stream then rollup

On FinalResultMessage
	display final result with all agent output in rollups by agent above
==============================================================


